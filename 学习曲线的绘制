def plot_learning_curve(estimator,
                       title,
                       X,
                       y,
                       ylim=None,
                       cv=None,
                       n_jobs=1,
                       train_sizes=np.linspace(.1,1.0,5)):
    plt.figure()
    plt.title(title)
    #设置Y的范围
    if ylim is not None:
        plt.ylim(*ylim)
    plt.xlabel("trianing examples")
    plt.ylabel("Score")
    train_sizes , train_scores,test_scores = learning_curve(
        estimator,X,y,cv=cv,n_jobs=n_jobs,train_sizes=train_sizes)
    
    #计算均值和标准差 然后画出标准差的范围
    train_scores_mean = np.mean(train_scores,axis=1)
    train_scores_std = np.std(train_scores,axis=1)
    test_scores_mean = np.mean(test_scores,axis=1)
    test_scores_std = np.std(test_scores,axis=1)
    
    plt.grid()
    #画出其波动范围
    plt.fill_between(train_sizes,
                    train_scores_mean-train_scores_std,
                    train_scores_mean+train_scores_std,
                    alpha=0.1,
                    color="r"
                    )
    #画出其波动范围 train_size就是训练集的个数
    plt.fill_between(train_sizes,
                    test_scores_mean-test_scores_std,
                    test_scores_mean+test_scores_std,
                    alpha=0.1,
                    color="g"
                    )
    plt.plot(train_sizes,
            train_scores_mean,
            "o-",
            color="r",
            label="Training score"
            )
    
    plt.plot(train_sizes,
            test_scores_mean,
            "o-",
            color="g",
            label="Cross-Validation score"
            )
    
    plt.legend(loc="best")

    return plt
